#lang racket/base
(provide
 compile-template)

(require
 (prefix-in mt: "../ast/metaterm.rkt")
 "../ast/decl.rkt"
 "../repr/ids.rkt"
 (for-template racket/base)
 (only-in racket/syntax generate-temporary format-id)
 racket/list
 racket/match
 syntax/parse)

;; =======================================================================================

;; -------------
;; Intermediate representation for code generated by templates
;; -------------

;; ir ::=
;;   | (ir:top-level [listof ir:clause] ir:imm)
;;
;; ir:clause ::=
;;   | (ir:clause:bind id stx)
;;   | (ir:clause:check stx spec)
;;
;; ir:imm ::=
;;   | (ir:imm:mk production [listof ir:imm])
;;   | (ir:imm:vec [listof ir:imm])
;;   | identifier
;;   | #'(quote <any>)

(struct ir:clause:bind (id stx) #:transparent)
(struct ir:top-level (clauses body) #:transparent)
(struct ir:clause:check (stx spec) #:transparent)
(struct ir:imm:mk (prod args) #:transparent)
(struct ir:imm:vec (elems) #:transparent)

;; metaterm -> ir
(define (metaterm->ir init-mt [fresh generate-temporary])

  ;; metaterm -> [listof ir:clause] [listof ir:imm]
  (define (anf mt)
    (match mt
      [(mt:unquoted stx spec)
       (define id (fresh))
       (values (list (ir:clause:bind id stx)
                     (ir:clause:check id spec))
               (list id))]

      [(mt:datum stx spec)
       (define stx+q #`(quote #,stx))
       (values (list (ir:clause:check stx+q spec))
               (list stx+q))]

      [(mt:prod prod body-mt)
       (define-values [cs is] (anf body-mt))
       (values cs (list (ir:imm:mk prod is)))]

      [(mt:multiple mts)
       ;; -> [listof ir:clause] [listof ir:imm]
       (let loop ([mts mts])
         (if (null? mts)
           (values '() '())
           (let-values ([(cs1 is1) (anf (car mts))]
                        [(cs2 is2) (loop (cdr mts))])
             (values (append cs1 cs2)
                     (append is1 is2)))))]

      [(mt:build n-cols rows)
       (define-values [cs iss]
         ;; -> [listof ir:clause] [listof [listof ir:imm]]
         (let loop ([rows rows])
           (if (null? rows)
             (values '() (make-list n-cols '()))
             (let-values ([(cs1 is) (anf (car rows))]
                          [(cs2 iss) (loop (cdr rows))])
               (values (append cs1 cs2)
                       (map cons is iss))))))
       (values cs (map ir:imm:vec iss))]))

  ;; ----

  (define-values [cs is] (anf init-mt))
  (ir:top-level cs (car is)))

;; -------------
;; compile-template
;; -------------

;; syntax syntax language-repr-ids metaterm -> syntax
; Compile a metaterm into an expression producing a language term; for use
; in (template ..) or related macros.
(define (compile-template src-stx macro-head repr-ids mt)
  (let ir->stx ([ir (metaterm->ir mt)])
    (match ir
      ; top-level
      [(ir:top-level clauses body)
       (quasisyntax/loc src-stx
         (let ()
           #,@(map ir->stx clauses)
           #,(ir->stx body)))]
      ; clauses
      [(ir:clause:bind id rhs-stx)
       (quasisyntax/loc src-stx
         (define-values [#,id] #,rhs-stx))]
      [(ir:clause:check stx spec)
       (quasisyntax/loc src-stx
         (unless (#,(spec-predicate spec repr-ids) #,stx)
           (raise-argument-error '#,macro-head
                                 '#,(spec-expectation-string spec)
                                 #,stx)))]
      ; immediates
      [(ir:imm:mk pr args)
       (define ctor-id (car (hash-ref (language-repr-ids-productions repr-ids) pr)))
       (quasisyntax/loc src-stx
         (#,ctor-id
          #,@(map ir->stx args)))]
      [(ir:imm:vec elems)
       (quasisyntax/loc src-stx
         (vector-immutable #,@(map ir->stx elems)))]
      [(? syntax? stx) stx])))

;; ----------------
;; helpers for contract checks
;; ----------------

;; spec language-repr-ids -> identifier
(define (spec-predicate spec repr-ids)
  (match spec
    [(? nonterminal-spec? nt)
     (hash-ref (language-repr-ids-predicates repr-ids) nt)]
    [(? terminal-spec? tm)
     (terminal-spec-contract-id tm)]))

;; spec -> string
(define (spec-expectation-string spec)
  (match spec
    [(? nonterminal-spec? nt)
     (format "nonterminal '~a'" (spec-description nt))]
    [(? terminal-spec? tm)
     (symbol->string (syntax-e (terminal-spec-contract-id tm)))]))

;; =======================================================================================

(module+ test
  (require
   rackunit
   "../util/syntax.rkt"
   "../util/example-language-decls.rkt"
   "../syntax/metaterm.rkt")

  ; special gensym used for tests only
  (define (temps)
    (define i 0)
    (Î» () (set! i (add1 i)) (format-id #'_ "tmp~a" i)))

  ; Pattern abbreviations
  (define-match-expander ir:imm:mk*
    (syntax-rules ()
      [(_ pr arg ...) (ir:imm:mk (== pr) (list arg ...))]))
  (define-match-expander ir:imm:vec*
    (syntax-rules ()
      [(_ elem ...) (ir:imm:vec (list elem ...))]))

  (define-syntax-rule (check-metaterm->ir spec mt-stx
                                          bind-patterns ...
                                          imm-pattern)
    (check-match (metaterm->ir (parse-mt spec L mt-stx)
                               (temps))
                 (ir:top-level (list bind-patterns ...)
                               imm-pattern)))

  ; Ad-hoc new nonterminal:
  ; [pt ::= (Point i i)]
  (define mv-i (metavar #'i 'i))
  (define pr-Pt (production #'_ 'Point (form-list #'() (list mv-i mv-i) #f '())))
  (define nt-pt (nonterminal-spec #'[pt ::=] '(pt) (list pr-Pt)))

  ;; ----------------

  ;; test unquote, datum
  (check-metaterm->ir tm-i #'45
                      (ir:clause:check (stx: '45) (== tm-i))
                      (stx: '45))
  (check-metaterm->ir tm-xy #',(some-expr)
                      (ir:clause:bind (stx: tmp1) (stx: (some-expr)))
                      (ir:clause:check (stx: tmp1) (== tm-xy))
                      (stx: tmp1))

  ;; test productions
  (check-metaterm->ir nt-c #'(C)
                      (ir:imm:mk* pr-C))

  (check-metaterm->ir nt-pt #'(Point 3 4)
                      (ir:clause:check (stx: '3) (== tm-i))
                      (ir:clause:check (stx: '4) (== tm-i))
                      (ir:imm:mk* pr-Pt (stx: '3) (stx: '4)))

  ;; test build
  (check-metaterm->ir nt-ab #'(B sym (C) ,some-c)
                      (ir:clause:check (stx: 'sym) (== tm-xy))
                      (ir:clause:bind (stx: tmp1) (stx: some-c))
                      (ir:clause:check (stx: tmp1) (== nt-c))
                      (ir:imm:mk* pr-B
                                  (stx: 'sym)
                                  (ir:imm:vec* (ir:imm:mk* pr-C)
                                               (stx: tmp1)))))
