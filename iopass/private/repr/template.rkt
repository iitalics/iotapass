#lang racket/base
(provide
 compile-template)

(require
 (prefix-in mt: "../ast/metaterm.rkt")
 "../ast/decl.rkt"
 "../repr/ids.rkt"
 (for-template racket/base (only-in racket/vector vector-append))
 (only-in racket/syntax generate-temporary format-id)
 (only-in racket/function curry)
 racket/list
 racket/match
 syntax/parse)

;; =======================================================================================

;; -------------
;; Intermediate representation for code generated by templates
;; -------------

;; ir ::=
;;   | (ir:top-level [listof ir:clause] ir:expr)
;;
;; ir:clause ::=
;;   | (ir:clause:check stx spec nat)
;;   | (ir:clause:bind id stx)
;;
;; ir:expr ::=
;;   | (ir:prod production [listof ir:expr])
;;   | (ir:vec [listof ir:expr])
;;   | (ir:append ir:expr ir:expr)
;;   | (ir:values [listof ir:expr])
;;   | (ir:for [listof ir:for-clause] ir:expr [listof id] ir:expr)
;;   | identifier
;;   | #'(quote <any>)

(struct ir:top-level (clauses body) #:transparent)
(struct ir:clause:check (stx spec depth) #:transparent)
(struct ir:clause:bind (id stx) #:transparent)
(struct ir:prod (prod args) #:transparent)
(struct ir:cons (head tail) #:transparent)
(struct ir:append (front back) #:transparent)
(struct ir:values (exprs) #:transparent)
(struct ir:for (for-clauses loop-expr list-ids body) #:transparent)

(struct ir:for-clause (id list-stx) #:transparent)

(define ir:empty #''())

(define (ir:auto-append front back)
  (if (equal? back ir:empty)
    front
    (ir:append front back)))

(define (ir:auto-values exprs)
  (match exprs
    [(list expr) expr]
    [_ (ir:values exprs)]))

;; --------------------
;; inside-out context to describe iteration variables
;; --------------------
;;
;; For instance, a pass at ellipsis-depth 2 may return this ctx:
;;   (for-loop {y x} (for-loop {x mylist} #f))
;; along with these immediates:
;;   (list #'y #''0)
;; This could be hypothetically transformed into this code:
;;   (for ([x mylist])
;;     (for ([y x])
;;        (values y '0)))
;;
;; Notice that the innermost clause is {y x}, but that was the outmost ctx:for-loop --
;; this is intentional, and it's why I'm calling it "inside-out". This way, we can peel
;; off layers of ctx:for-loop in order to incrementally add layers to the innermost
;; syntax.
;; --------------------

;; loop-ctx ::=
;;   | #f
;;   | (for-loop [listof ir:for-clause] loop-ctx)
(struct for-loop (clauses up) #:transparent)

;; nat -> loop-ctx
(define (empty-loops depth)
  (for/fold ([cx #f]) ([_ (in-range depth)])
    (for-loop '() cx)))

;; loop-ctx loop-ctx -> loop-ctx
(define/match (merge-loops cx1 cx2)
  [{#f #f} #f]
  [{(for-loop fcs1 up1) (for-loop fcs2 up2)}
   (for-loop (append fcs1 fcs2)
             (merge-loops up1 up2))])

;; --------------------
;; metaterm -> ir
;; --------------------

(define (metaterm->ir initial-mt [fresh generate-temporary])

  ;; nat metaterm -> metaterm [listof ir:clause]
  ; Create bindings for expressions that may have side effects, and replace those
  ; expression with ids. Generate any needed contract checks.
  (define (rebind+check initial-mt)
    (define clauses '())
    (define (add-clause! c) (set! clauses (cons c clauses)))
    (define (trav depth mt)
      (match mt
        [(mt:unquoted stx spec)
         (define id (fresh))
         (add-clause! (ir:clause:bind id stx))
         (add-clause! (ir:clause:check id spec depth))
         (mt:unquoted id spec)]
        [(mt:datum stx spec)
         (add-clause! (ir:clause:check #`(quote #,stx) spec 0))
         mt]
        [(mt:prod prod body)
         (mt:prod prod (trav depth body))]
        [(mt:multiple cols)
         (mt:multiple (map (curry trav depth) cols))]
        [(mt:build n-cols rows)
         (mt:build n-cols (map (curry trav/e depth) rows))]))
    (define (trav/e depth mt-or-e)
      (match mt-or-e
        [(mt:e m) (mt:e (trav (add1 depth) m))]
        [m (trav depth m)]))
    (values (trav 0 initial-mt) (reverse clauses)))

  ;; ir-kont = [ir:expr -> ir:expr]
  (define (id-kont x) x)

  ;; nat metaterm -> loop-ctx ir-kont [listof ir:expr]
  ; Compile an intermediate metaterm at the given ellipsis depth. The term should not have
  ; any side-effectful expressions ('rebind' should have been called first).
  ; The resulting ctx must have depth equal to the given depth. In particular, this
  ; implies that it is #f if depth is 0, and it is (ctx:for-loop ..) if depth is positive.
  (define (anf depth mt)
    (match mt
      [(mt:unquoted stx spec)
       ; create nested loop-ctx according to depth, something like:
       ; (for ([x0 stx]) (for ([x1 x0]) (for ([x2 x1]) ..)))
       (for/fold ([cx #f] [stx stx] #:result (values cx id-kont (list stx)))
                 ([_ (in-range depth)])
         (define id (fresh))
         (values (for-loop (list (ir:for-clause id stx))
                           cx)
                 id))]

      [(mt:datum stx spec)
       (define stx+q #`(quote #,stx))
       (values (empty-loops depth)
               id-kont
               (list stx+q))]

      [(mt:prod prod body-mt)
       (define-values [cx kont exprs] (anf depth body-mt))
       (values cx kont (list (ir:prod prod exprs)))]

      [(mt:multiple cols)
       (let loop ([cols cols]) ; -> loop-ctx ir-kont [listof ir:expr]
         (match cols
           ['()
            (values (empty-loops depth)
                    id-kont
                    '())]

           [(cons mt* cols*)
            (define-values [cx1 kont1 exprs1] (anf depth mt*))
            (define-values [cx2 kont2 exprs2] (loop cols*))
            (values (merge-loops cx1 cx2)
                    (compose kont1 kont2)
                    (append exprs1 exprs2))]))]

      [(mt:build n-cols rows)
       (let loop ([rows rows]) ; -> loop-ctx ir-kont [listof ir:expr]
         (match rows
           ['()
            (values (empty-loops depth)
                    id-kont
                    (make-list n-cols ir:empty))]

           ; compile ellipsis into ir:for & ir:append
           [(cons (mt:e list-mt) rows*)
            (define-values [list-cx list-kont elems] (anf (add1 depth) list-mt))
            (match-define (for-loop for-clauses f-cx) list-cx)
            (define list-ids (map (λ (_) (fresh)) elems))
            (define elems* (ir:auto-values elems))
            (define f-kont (curry ir:for for-clauses (list-kont elems*) list-ids))
            (define-values [b-cx b-kont b-exprs] (loop rows*))
            (values (merge-loops f-cx b-cx)
                    (compose f-kont b-kont)
                    (map ir:auto-append list-ids b-exprs))]

           ; compile non-ellipsis elements into just ir:cons
           [(cons mt* rows*)
            (define-values [h-cx h-kont h-exprs] (anf depth mt*))
            (define-values [t-cx t-kont t-exprs] (loop rows*))
            (values (merge-loops h-cx t-cx)
                    (compose h-kont t-kont)
                    (map ir:cons h-exprs t-exprs))]))]))

  ;;;;;;;;;;;;;;;;

  (define-values [initial-mt* clauses] (rebind+check initial-mt))
  (match-define-values [#f kont (list expr)] (anf 0 initial-mt*))
  (ir:top-level clauses (kont expr)))

;; -------------
;; compile-template
;; -------------

;; syntax syntax language-repr-ids metaterm -> syntax
; Compile a metaterm into an expression producing a language term; for use
; in (template ..) or related macros.
(define (compile-template src-stx macro-head repr-ids mt)
  (let ir->stx ([ir (metaterm->ir mt)])
    (match ir
      ; top-level
      [(ir:top-level clauses body)
       (quasisyntax/loc src-stx
         (let ()
           #,@(map ir->stx clauses)
           #,(ir->stx body)))]
      ; clauses
      [(ir:clause:check stx spec depth)
       (quasisyntax/loc src-stx
         (unless (listof/depth '#,depth
                               #,(spec-predicate spec repr-ids)
                               #,stx)
           (raise-argument-error '#,macro-head
                                 '#,(spec-expectation-string depth spec)
                                 #,stx)))]
      [(ir:clause:bind id rhs-stx)
       (quasisyntax/loc src-stx
         (define-values [#,id] #,rhs-stx))]
      ; expressions
      [(ir:prod pr args)
       (define ctor-id (car (hash-ref (language-repr-ids-productions repr-ids) pr)))
       (quasisyntax/loc src-stx
         (#,ctor-id
          #,@(map ir->stx args)))]
      [(ir:cons h t)
       (quasisyntax/loc src-stx
         (cons #,(ir->stx h)
               #,(ir->stx t)))]
      [(ir:append f b)
       (quasisyntax/loc src-stx
         (append #,(ir->stx f)
                 #,(ir->stx b)))]
      [(ir:values es)
       (quasisyntax/loc src-stx
         (values #,@(map ir->stx es)))]
      [(ir:for for-clauses elem-expr out-ids body)
       (define/syntax-parse (id ...) (map ir:for-clause-id for-clauses))
       (define/syntax-parse (list ...) (map ir:for-clause-list-stx for-clauses))
       (quasisyntax/loc src-stx
         (let-values ([#,out-ids
                       (for/lists #,out-ids
                                  ([id (in-list list)] ...)
                         #,(ir->stx elem-expr))])
           #,(ir->stx body)))]
      [(? syntax? stx) stx])))

;; ----------------
;; helpers for contract checks
;; ----------------

(module listof/depth racket/base
  (provide listof/depth)
  ;; nat [any -> bool] any -> bool
  (define (listof/depth n f x)
    (if (zero? n)
      (f x)
      (and (list? x)
           (andmap (λ (y) (listof/depth (sub1 n) f y)) x)))))

(require (for-template 'listof/depth))

;; spec language-repr-ids -> identifier
(define (spec-predicate spec repr-ids)
  (match spec
    [(? nonterminal-spec? nt)
     (hash-ref (language-repr-ids-predicates repr-ids) nt)]
    [(? terminal-spec? tm)
     (terminal-spec-contract-id tm)]))

;; spec depth -> string
(define (spec-expectation-string depth spec)
  (if (zero? depth)
    (match spec
      [(? nonterminal-spec? nt)
       (format "<nonterminal:~a>" (spec-description nt))]
      [(? terminal-spec? tm)
       (symbol->string (syntax-e (terminal-spec-contract-id tm)))])
    (format "(listof ~a)"
            (spec-expectation-string (sub1 depth) spec))))

;; =======================================================================================

(module+ test
  (require
   rackunit
   threading
   "../util/syntax.rkt"
   "../util/example-language-decls.rkt"
   "../syntax/metaterm.rkt")

  ; Special gensym used for tests only
  (define (temps)
    (define i 0)
    (λ () (set! i (add1 i)) (format-id #'_ "tmp~a" i)))

  ; Pattern abbreviations
  (define-match-expander ir:list
    (syntax-rules ()
      [(_) (== ir:empty)]
      [(_ h t ...) (ir:cons h (ir:list t ...))]))

  (define-syntax-rule (check-metaterm->ir spec mt-stx
                                          bind-patterns ...
                                          imm-pattern)
    (check-match (metaterm->ir (parse-mt spec L mt-stx)
                               (temps))
                 (ir:top-level (list bind-patterns ...)
                               imm-pattern)))

  ;; Ad-hoc new nonterminals
  (define mv-i (metavar #'i 'i))
  (define mv-x (metavar #'x 'x))

  ; [pt ::= (Point i i)]
  (define pr-Pt (production #'X 'Point (form-list #'X (list mv-i mv-i) #f '())))
  (define nt-pt (nonterminal-spec #'[pt ::=] '(pt) (list pr-Pt)))

  ; [tbl ::= (Tbl [x i] ...)
  (define pr-Tbl
    (~> (form-list #'X (list mv-x mv-i) #f '())
        (ellipsis _)
        (form-list #'X '() _ '())
        (production #'X 'Tbl _)))
  (define nt-tbl (nonterminal-spec #'[tbl ::=] '(tbl) (list pr-Tbl)))

  ; [mat ::= (Mat [i ...] ...)]
  (define pr-Mat
    (~> (form-list #'X '() (ellipsis mv-i) '())
        (ellipsis _)
        (form-list #'X '() _ '())
        (production #'X 'Mat _)))
  (define nt-mat
    (nonterminal-spec #'[mat ::=] '(mat) (list pr-Mat)))

  ;; ----------------

  ;; test unquote, datum
  (check-metaterm->ir tm-i #'45
                      (ir:clause:check (stx: '45) (== tm-i) 0)
                      (stx: '45))
  (check-metaterm->ir tm-xy #',(some-expr)
                      (ir:clause:bind (stx: tmp1) (stx: (some-expr)))
                      (ir:clause:check (stx: tmp1) (== tm-xy) 0)
                      (stx: tmp1))

  ;; test productions
  (check-metaterm->ir nt-c #'(C)
                      (ir:prod (== pr-C) '()))

  (check-metaterm->ir nt-pt #'(Point 3 4)
                      (ir:clause:check (stx: '3) (== tm-i) 0)
                      (ir:clause:check (stx: '4) (== tm-i) 0)
                      (ir:prod (== pr-Pt) (list (stx: '3) (stx: '4))))

  ;; test build
  (check-metaterm->ir nt-ab #'(B sym (C) ,some-c)
                      (ir:clause:check (stx: 'sym) (== tm-xy) 0)
                      (ir:clause:bind (stx: tmp1) (stx: some-c))
                      (ir:clause:check (stx: tmp1) (== nt-c) 0)
                      (ir:prod (== pr-B)
                               (list (stx: 'sym)
                                     (ir:list (ir:prod (== pr-C) '())
                                              (stx: tmp1)))))

  ;; - ellipsis (simple)
  (check-metaterm->ir nt-ab (quote-syntax (B sym ,c-list ...))
                      (ir:clause:check (stx: 'sym) (== tm-xy) 0)
                      (ir:clause:bind (stx: tmp1) (stx: c-list))
                      (ir:clause:check (stx: tmp1) (== nt-c) 1)
                      (ir:for (list (ir:for-clause (stx: tmp2) (stx: tmp1)))
                              (stx: tmp2)
                              (list (stx: tmp3))
                              (ir:prod (== pr-B)
                                       (list (stx: 'sym) (stx: tmp3)))))

  ;; - ellipsis (parallel)
  (check-metaterm->ir nt-tbl (quote-syntax (Tbl [,x* ,i*] ...))
                      (ir:clause:bind (stx: tmp1) (stx: x*))
                      (ir:clause:check (stx: tmp1) (== tm-xy) 1)
                      (ir:clause:bind (stx: tmp2) (stx: i*))
                      (ir:clause:check (stx: tmp2) (== tm-i) 1)
                      (ir:for (list (ir:for-clause (stx: tmp3) (stx: tmp1))
                                    (ir:for-clause (stx: tmp4) (stx: tmp2)))
                              ; loop expr:
                              (ir:values (list (stx: tmp3) (stx: tmp4)))
                              ; out ids:
                              (list (stx: tmp5) (stx: tmp6))
                              ; body:
                              (ir:prod (== pr-Tbl)
                                       (list (stx: tmp5)
                                             (stx: tmp6)))))

  ;; - ellipsis (higher ellipsis depth)
  (check-metaterm->ir nt-mat (quote-syntax (Mat [,i** ...] ...))
                      (ir:clause:bind (stx: tmp1) (stx: i**))
                      (ir:clause:check (stx: tmp1) (== tm-i) 2)
                      (ir:for (list (ir:for-clause (stx: tmp2) (stx: tmp1)))
                              ; loop expr:
                              (ir:for (list (ir:for-clause (stx: tmp3) (stx: tmp2)))
                                      ; loop expr:
                                      (stx: tmp3)
                                      ; out ids:
                                      (list (stx: tmp4))
                                      ; body:
                                      (stx: tmp4))
                              ; out ids:
                              (list (stx: tmp5))
                              ; body:
                              (ir:prod (== pr-Mat) (list (stx: tmp5)))))

  ;; - ellipsis (combined ellipsis depth)
  (check-metaterm->ir nt-mat (quote-syntax (Mat [,i* ,i** ...] ...))
                      (ir:clause:bind (stx: tmp1) (stx: i*))
                      (ir:clause:check (stx: tmp1) (== tm-i) 1)
                      (ir:clause:bind (stx: tmp2) (stx: i**))
                      (ir:clause:check (stx: tmp2) (== tm-i) 2)
                      (ir:for (list (ir:for-clause (stx: tmp3) (stx: tmp1))
                                    (ir:for-clause (stx: tmp4) (stx: tmp2)))
                              ; loop expr:
                              (ir:for (list (ir:for-clause (stx: tmp5) (stx: tmp4)))
                                      ; loop expr:
                                      (stx: tmp5)
                                      ; out ids:
                                      (list (stx: tmp6))
                                      ; body:
                                      (ir:cons (stx: tmp3)
                                               (stx: tmp6)))
                              ; out ids:
                              (list (stx: tmp7))
                              ; body:
                              (ir:prod (== pr-Mat) (list (stx: tmp7))))))
